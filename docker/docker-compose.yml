version: "3.8"

#common elasticsearch environment settings
x-common-elasticsearch-environment: &common-elasticsearch-environment
  cluster.name: "mc_elasticsearch"
  discovery.seed_hosts: elasticsearch1,elasticsearch2,elasticsearch3
  cluster.initial_master_nodes: elasticsearch1,elasticsearch2,elasticsearch3
  node.roles: master,data
  bootstrap.memory_lock: "true"
  ES_JAVA_OPTS: "-Xms20g -Xmx20g"
  xpack.security.enabled: "false"
  path.repo: "/var/backups/elasticsearch"
  network.publish_host: _eth0_

x-indexer-deployment-constraints: &indexer-deployment-constraints
    placement:
      constraints:
        - node.labels.role_indexer == true

x-es-deployment-constraints: &es-deployment-constraints
    placement:
      constraints:
        - node.labels.role_es == true

services:
  swarm-cronjob:
    image: crazymax/swarm-cronjob
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - "LOG_LEVEL=info"
      - "LOG_JSON=false"
      - "TZ=GMT"
    deploy:
      placement:
        constraints:
          - node.role == manager

  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - story-indexer
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 2
    deploy:
      <<: *indexer-deployment-constraints

  elasticsearch-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    user: root
    volumes:
      - elasticsearch_data_backup:/var/backups/elasticsearch
    command: bash -c "chown -R elasticsearch:elasticsearch /var/backups/elasticsearch"
    networks:
      - story-indexer


  elasticsearch1:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      <<: *common-elasticsearch-environment
      node.name: "elasticsearch1"

    volumes:
      - elasticsearch_data_01:/usr/share/elasticsearch/data
      - elasticsearch_data_backup:/var/backups/elasticsearch
    networks:
      - story-indexer
    ports:
      - 9200:9200
      - 9300:9300
    # Memory lock check:allocate unlimited amount of locked memory to ES
    ulimits:
      memlock:
        soft: -1
        hard: -1
    #update these based on node setup
    deploy:
      <<: *es-deployment-constraints

  elasticsearch2:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      <<: *common-elasticsearch-environment
      node.name: "elasticsearch2"

    volumes:
      - elasticsearch_data_02:/usr/share/elasticsearch/data
      - elasticsearch_data_backup:/var/backups/elasticsearch
    ports:
      - 9201:9200
      - 9301:9300
    networks:
      - story-indexer
    ulimits:
      memlock:
        soft: -1
        hard: -1

    #update these based on node setup
    deploy:
      <<: *es-deployment-constraints

  elasticsearch3:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      <<: *common-elasticsearch-environment
      node.name: "elasticsearch3"

    volumes:
      - elasticsearch_data_03:/usr/share/elasticsearch/data
      - elasticsearch_data_backup:/var/backups/elasticsearch
    ports:
      - 9202:9200
      - 9302:9300
    networks:
      - story-indexer
    ulimits:
      memlock:
        soft: -1
        hard: -1

    #update these based on node setup
    deploy:
      <<: *es-deployment-constraints

  common_worker: &common_worker
    #Pushing to a local registry for now, while in dev loop.
    image: localhost:5000/common_worker
    build:
      context: ..
      dockerfile: docker/Dockerfile
    environment:
      RABBITMQ_URL: &RABBITMQ_URL_ amqp://rabbitmq:5672/?connection_attempts=10&retry_delay=5
      RUN: ${RUN}
      STATSD_REALM: &STATSD_REALM_ staging
      STORY_FACTORY: &STORY_FACTORY_ "BaseStory"
    networks:
      - story-indexer
    restart: "no"
    volumes:
      - worker_data:/app/data/
    deploy:
      <<: *indexer-deployment-constraints

  pipeline_configurator:
    <<: *common_worker
    environment:
      RUN: configure-pipeline
      ARGS: "configure"
      RABBITMQ_URL: *RABBITMQ_URL_
      STATSD_URL: statsd://stats.tarbell.mediacloud.org
      STATSD_REALM: *STATSD_REALM_
    restart: "on-failure"
    deploy:
      <<: *indexer-deployment-constraints

  fetch_worker:
    <<: *common_worker
    environment:
      RUN: fetcher
      ARGS: "--log-level=info --yesterday --batch-index={{.Task.Slot}}"
      FETCHER_NUM_BATCHES: &NUM_BATCHES 10
      RABBITMQ_URL: *RABBITMQ_URL_
      STATSD_URL: statsd://stats.tarbell.mediacloud.org
      STATSD_REALM: *STATSD_REALM_
      STORY_FACTORY: *STORY_FACTORY_
    restart: "on-failure"
    deploy:
      <<: *indexer-deployment-constraints
      labels:
         swarm.cronjob.enable: "true"
         swarm.cronjob.schedule: "0 0 * * *"
         swarm.cronjob.replicas: *NUM_BATCHES
      replicas: *NUM_BATCHES

  parser_worker:
    <<: *common_worker
    environment:
      RUN: parser
      RABBITMQ_URL: *RABBITMQ_URL_
      STATSD_URL: statsd://stats.tarbell.mediacloud.org
      STATSD_REALM: *STATSD_REALM_
      STORY_FACTORY: *STORY_FACTORY_
    restart: "on-failure"
    deploy:
      <<: *indexer-deployment-constraints

  importer_worker:
    <<: *common_worker
    depends_on:
      - elasticsearch1
    networks:
      - story-indexer
    environment:
      RUN: importer
      RABBITMQ_URL: *RABBITMQ_URL_
      ELASTICSEARCH_HOST: http://elasticsearch1:9200/
      ELASTICSEARCH_INDEX_NAME: mediacloud_search_text
      STATSD_URL: statsd://stats.tarbell.mediacloud.org
      STATSD_REALM: *STATSD_REALM_
      STORY_FACTORY: *STORY_FACTORY_
      ELASTICSEARCH_SHARDS: 1
      ELASTICSEARCH_REPLICAS: 0
    restart:
        "on-failure"
    deploy:
      <<: *indexer-deployment-constraints

  rabbitmq_stats:
    <<: *common_worker
    environment:
      RUN: rabbitmq-stats
      STATSD_URL: statsd://stats.tarbell.mediacloud.org
      STATSD_REALM: *STATSD_REALM_
      STORY_FACTORY: *STORY_FACTORY_
    networks:
      - story-indexer
    restart: "on-failure"
    deploy:
      <<: *indexer-deployment-constraints

volumes:
  elasticsearch_data_01:
  elasticsearch_data_02:
  elasticsearch_data_03:
  rabbitmq_data:
  elasticsearch_data_backup:
    #Neccesary for diskstory, ideally not used
  worker_data:

networks:
  story-indexer:
    driver: overlay
